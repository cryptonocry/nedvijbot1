from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.utils import executor
import os
import datetime

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "280665761"))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥–º–∏–Ω–∞)
def main_menu(user_id=None):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üè¢ –ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å", callback_data="complex"),
        InlineKeyboardButton("üåç –†–∞–π–æ–Ω", callback_data="district"),
        InlineKeyboardButton("üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞", callback_data="apartment"),
        InlineKeyboardButton("üé• –í–∏–¥–µ–æ–æ–±–∑–æ—Ä", callback_data="video"),
        InlineKeyboardButton("üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="viz"),
        InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="visit"),
        InlineKeyboardButton("üë• –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞", callback_data="team"),
        InlineKeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä –ø—Ä–æ–µ–∫—Ç–∞", callback_data="partner"),
    )
    if user_id == ADMIN_ID:
        keyboard.add(InlineKeyboardButton("üì¨ –ó–∞—è–≤–∫–∏", callback_data="show_requests"))
    return keyboard

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
nav_menu = InlineKeyboardMarkup().add(
    InlineKeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="menu")
)

# –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
section_messages = {
    "complex": [
        ("–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å '–°–æ–∫–æ–ª': —Å—Ç–∏–ª—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç", "media/complex1.jpg"),
        ("–ü–∞–Ω–æ—Ä–∞–º–∞ –¥–≤–æ—Ä–∞", "media/complex2.jpg")
    ],
    "district": [
        ("–†–∞–π–æ–Ω –°–æ–∫–æ–ª ‚Äî —ç–ª–∏—Ç–Ω–æ–µ –ø—Ä–æ—à–ª–æ–µ –∏ –±—É–¥—É—â–µ–µ", "media/district1.jpg"),
        ("–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ", "media/district2.jpg")
    ],
    "apartment": [
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã 72–º¬≤", "media/apartment1.jpg"),
        ("–ö—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è –≤ —Å—Ç–∏–ª–µ –º–∏–Ω–∏–º–∞–ª–∏–∑–º", "media/apartment2.jpg")
    ]
}

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu(msg.from_user.id))

@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id

    if data == "menu":
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu(user_id))

    elif data == "visit":
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:")

    elif data == "show_requests":
        if user_id == ADMIN_ID:
            if not os.path.exists("requests.txt"):
                await bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            else:
                with open("requests.txt", "r", encoding="utf-8") as f:
                    content = f.read()

                preview = content if len(content) <= 4000 else content[-4000:]  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                await bot.send_message(user_id, f"üì¨ –í—Å–µ –∑–∞—è–≤–∫–∏:\n\n{preview}")
                await bot.send_document(user_id, InputFile("requests.txt"))
        else:
            await bot.send_message(user_id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")

    elif data in section_messages:
        for text, image_path in section_messages[data]:
            with open(image_path, "rb") as photo:
                await bot.send_photo(user_id, photo=photo, caption=text)
        await bot.send_message(user_id, "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=nav_menu)

    else:
        await bot.send_message(user_id, f"–†–∞–∑–¥–µ–ª: {data} (–∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=nav_menu)

    await callback_query.answer()

@dp.message_handler(lambda message: message.text and not message.text.startswith("/"))
async def handle_user_input(message: types.Message):
    username = message.from_user.username or "–±–µ–∑_username"
    date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    text = f"–ó–∞—è–≤–∫–∞ –æ—Ç @{username}:\n{message.text}"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open("requests.txt", "a", encoding="utf-8") as f:
        f.write(f"[{date_str}] {text}\n")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(ADMIN_ID, f"{text}\nüïì {date_str}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=main_menu(message.from_user.id))

if __name__ == "__main__":
    executor.start_polling(dp)
