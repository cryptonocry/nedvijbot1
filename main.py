from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
import os

# Use environment variable for token
TOKEN = os.getenv("BOT_TOKEN", "7665240651:AAHbJ4fBrNQxwcLFO-J1KEHGLTe18q4CaQ4")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# Main menu
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üè¢ –ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å", callback_data="complex_0"),
        InlineKeyboardButton("üåç –†–∞–π–æ–Ω", callback_data="district_0"),
        InlineKeyboardButton("üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞", callback_data="apartment_0"),
        InlineKeyboardButton("üé• –í–∏–¥–µ–æ–æ–±–∑–æ—Ä", callback_data="video"),
        InlineKeyboardButton("üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="viz"),
        InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="visit"),
        InlineKeyboardButton("üë• –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞", callback_data="team"),
        InlineKeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä –ø—Ä–æ–µ–∫—Ç–∞", callback_data="partner"),
    )
    return keyboard

# Navigation buttons
def navigation_buttons(section, index, total):
    keyboard = InlineKeyboardMarkup(row_width=2)
    if index == 0:
        keyboard.add(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"{section}_{index+1}"))
    elif index == total - 1:
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{section}_{index-1}"))
    else:
        keyboard.row(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{section}_{index-1}"),
            InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"{section}_{index+1}")
        )
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", callback_data="menu"))
    return keyboard

# Section content
section_messages = {
    "complex": [
        ("–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å '–°–æ–∫–æ–ª': —Å—Ç–∏–ª—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç", "media/complex1.jpg"),
        ("–ü–∞–Ω–æ—Ä–∞–º–∞ –¥–≤–æ—Ä–∞", "media/complex2.jpg"),
        ("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞—Å–∞–¥ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "media/complex3.jpg")
    ],
    "district": [
        ("–†–∞–π–æ–Ω –°–æ–∫–æ–ª ‚Äî —ç–ª–∏—Ç–Ω–æ–µ –ø—Ä–æ—à–ª–æ–µ –∏ –±—É–¥—É—â–µ–µ", "media/district1.jpg"),
        ("–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ", "media/district2.jpg"),
        ("–ó–µ–ª—ë–Ω—ã–µ –∑–æ–Ω—ã –∏ –ø–∞—Ä–∫–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏", "media/district3.jpg")
    ],
    "apartment": [
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã 72–º¬≤", "media/apartment1.jpg"),
        ("–ö—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è –≤ —Å—Ç–∏–ª–µ –º–∏–Ω–∏–º–∞–ª–∏–∑–º", "media/apartment2.jpg"),
        ("–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è —Å–ø–∞–ª—å–Ω—è —Å –≤–∏–¥–æ", "media/apartment3.jpg")
    ]
}

# Handle any message to show main menu
@dp.message_handler()
async def handle_any_message(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu())

# Handle all callback queries
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id

    try:
        if data == "menu":
            await bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
            await callback_query.answer()

        elif data == "visit":
            print("Processing 'visit' callback")  # Log to debug
            try:
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å: +79993332211", url="tel:+79993332211"),
                    InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/vitalllx"),
                    InlineKeyboardButton("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", callback_data="menu")
                )
                print("Keyboard created successfully")  # Log to debug
                await bot.send_message(user_id, "–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ:", reply_markup=keyboard)
                print("Message sent successfully")  # Log to debug
                await callback_query.answer()
            except Exception as e:
                print(f"Error in 'visit' callback: {e}")  # Specific error logging
                raise  # Re-raise to catch in outer try-except

        elif "_" in data:
            section, index = data.split("_")
            index = int(index)
            if section in section_messages and 0 <= index < len(section_messages[section]):
                text, image_path = section_messages[section][index]
                try:
                    with open(image_path, "rb") as photo:
                        keyboard = navigation_buttons(section, index, len(section_messages[section]))
                        await bot.send_photo(user_id, photo=photo, caption=text, reply_markup=keyboard)
                except FileNotFoundError as e:
                    print(f"File not found: {image_path}, Error: {e}")  # Log file errors
                    await bot.send_message(user_id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            else:
                await bot.send_message(user_id, "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_menu())
            await callback_query.answer()

        else:
            await bot.send_message(user_id, "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_menu())
            await callback_query.answer()

    except Exception as e:
        print(f"General error in callback: {e}")  # Log the error
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        await callback_query.answer()

# Start the bot
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
