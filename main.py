from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.utils import executor
import os

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "280665761"))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üè¢ –ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å", callback_data="complex"),
        InlineKeyboardButton("üåç –†–∞–π–æ–Ω", callback_data="district"),
        InlineKeyboardButton("üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞", callback_data="apartment"),
        InlineKeyboardButton("üé• –í–∏–¥–µ–æ–æ–±–∑–æ—Ä", callback_data="video"),
        InlineKeyboardButton("üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="viz"),
        InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="visit"),
        InlineKeyboardButton("üë• –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞", callback_data="team"),
        InlineKeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä –ø—Ä–æ–µ–∫—Ç–∞", callback_data="partner"),
    )
    return keyboard

section_messages = {
    "complex": [
        ("–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å '–°–æ–∫–æ–ª': —Å—Ç–∏–ª—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç", "media/complex1.jpg"),
        ("–ü–∞–Ω–æ—Ä–∞–º–∞ –¥–≤–æ—Ä–∞", "media/complex2.jpg")
    ],
    "district": [
        ("–†–∞–π–æ–Ω –°–æ–∫–æ–ª ‚Äî —ç–ª–∏—Ç–Ω–æ–µ –ø—Ä–æ—à–ª–æ–µ –∏ –±—É–¥—É—â–µ–µ", "media/district1.jpg"),
        ("–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ", "media/district2.jpg")
    ],
    "apartment": [
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã 72–º¬≤", "media/apartment1.jpg"),
        ("–ö—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è –≤ —Å—Ç–∏–ª–µ –º–∏–Ω–∏–º–∞–ª–∏–∑–º", "media/apartment2.jpg")
    ]
}

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data == "visit":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:")
    elif data in section_messages:
        for text, image_path in section_messages[data]:
            with open(image_path, "rb") as photo:
                await bot.send_photo(callback_query.from_user.id, photo=photo, caption=text)
    else:
        await bot.send_message(callback_query.from_user.id, f"–†–∞–∑–¥–µ–ª: {data} (–∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    await callback_query.answer()

@dp.message_handler(lambda message: message.text and not message.text.startswith("/"))
async def handle_user_input(message: types.Message):
    text = f"–ó–∞—è–≤–∫–∞ –æ—Ç @{message.from_user.username or '–±–µ–∑_username'}:\n{message.text}"
    await bot.send_message(ADMIN_ID, text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

if __name__ == "__main__":
    executor.start_polling(dp)
